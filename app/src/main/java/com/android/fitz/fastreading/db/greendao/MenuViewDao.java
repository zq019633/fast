package com.android.fitz.fastreading.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.android.fitz.fastreading.db.entity.MenuView;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MENU_VIEW".
*/
public class MenuViewDao extends AbstractDao<MenuView, String> {

    public static final String TABLENAME = "MENU_VIEW";

    /**
     * Properties of entity MenuView.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Type = new Property(0, String.class, "type", false, "TYPE");
        public final static Property Route = new Property(1, String.class, "route", false, "ROUTE");
        public final static Property V_desc = new Property(2, String.class, "v_desc", false, "V_DESC");
        public final static Property Photo = new Property(3, String.class, "photo", false, "PHOTO");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(5, String.class, "content", false, "CONTENT");
        public final static Property Id = new Property(6, String.class, "id", true, "ID");
    }


    public MenuViewDao(DaoConfig config) {
        super(config);
    }
    
    public MenuViewDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MENU_VIEW\" (" + //
                "\"TYPE\" TEXT," + // 0: type
                "\"ROUTE\" TEXT," + // 1: route
                "\"V_DESC\" TEXT," + // 2: v_desc
                "\"PHOTO\" TEXT," + // 3: photo
                "\"TITLE\" TEXT," + // 4: title
                "\"CONTENT\" TEXT," + // 5: content
                "\"ID\" TEXT PRIMARY KEY NOT NULL );"); // 6: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MENU_VIEW\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MenuView entity) {
        stmt.clearBindings();
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(1, type);
        }
 
        String route = entity.getRoute();
        if (route != null) {
            stmt.bindString(2, route);
        }
 
        String v_desc = entity.getV_desc();
        if (v_desc != null) {
            stmt.bindString(3, v_desc);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(4, photo);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(7, id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MenuView entity) {
        stmt.clearBindings();
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(1, type);
        }
 
        String route = entity.getRoute();
        if (route != null) {
            stmt.bindString(2, route);
        }
 
        String v_desc = entity.getV_desc();
        if (v_desc != null) {
            stmt.bindString(3, v_desc);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(4, photo);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(7, id);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6);
    }    

    @Override
    public MenuView readEntity(Cursor cursor, int offset) {
        MenuView entity = new MenuView( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // type
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // route
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // v_desc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // photo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // content
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MenuView entity, int offset) {
        entity.setType(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRoute(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setV_desc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhoto(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(MenuView entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(MenuView entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MenuView entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
