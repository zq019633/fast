package com.android.fitz.fastreading.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.android.fitz.fastreading.db.entity.Question;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUESTION".
*/
public class QuestionDao extends AbstractDao<Question, String> {

    public static final String TABLENAME = "QUESTION";

    /**
     * Properties of entity Question.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Answer = new Property(1, String.class, "answer", false, "ANSWER");
        public final static Property Op1 = new Property(2, String.class, "op1", false, "OP1");
        public final static Property Op3 = new Property(3, String.class, "op3", false, "OP3");
        public final static Property Op2 = new Property(4, String.class, "op2", false, "OP2");
        public final static Property Q_type = new Property(5, String.class, "q_type", false, "Q_TYPE");
        public final static Property Op4 = new Property(6, String.class, "op4", false, "OP4");
        public final static Property Title = new Property(7, String.class, "title", false, "TITLE");
        public final static Property Train_id = new Property(8, String.class, "train_id", false, "TRAIN_ID");
    }


    public QuestionDao(DaoConfig config) {
        super(config);
    }
    
    public QuestionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUESTION\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"ANSWER\" TEXT," + // 1: answer
                "\"OP1\" TEXT," + // 2: op1
                "\"OP3\" TEXT," + // 3: op3
                "\"OP2\" TEXT," + // 4: op2
                "\"Q_TYPE\" TEXT," + // 5: q_type
                "\"OP4\" TEXT," + // 6: op4
                "\"TITLE\" TEXT," + // 7: title
                "\"TRAIN_ID\" TEXT);"); // 8: train_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUESTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Question entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(2, answer);
        }
 
        String op1 = entity.getOp1();
        if (op1 != null) {
            stmt.bindString(3, op1);
        }
 
        String op3 = entity.getOp3();
        if (op3 != null) {
            stmt.bindString(4, op3);
        }
 
        String op2 = entity.getOp2();
        if (op2 != null) {
            stmt.bindString(5, op2);
        }
 
        String q_type = entity.getQ_type();
        if (q_type != null) {
            stmt.bindString(6, q_type);
        }
 
        String op4 = entity.getOp4();
        if (op4 != null) {
            stmt.bindString(7, op4);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(8, title);
        }
 
        String train_id = entity.getTrain_id();
        if (train_id != null) {
            stmt.bindString(9, train_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Question entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(2, answer);
        }
 
        String op1 = entity.getOp1();
        if (op1 != null) {
            stmt.bindString(3, op1);
        }
 
        String op3 = entity.getOp3();
        if (op3 != null) {
            stmt.bindString(4, op3);
        }
 
        String op2 = entity.getOp2();
        if (op2 != null) {
            stmt.bindString(5, op2);
        }
 
        String q_type = entity.getQ_type();
        if (q_type != null) {
            stmt.bindString(6, q_type);
        }
 
        String op4 = entity.getOp4();
        if (op4 != null) {
            stmt.bindString(7, op4);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(8, title);
        }
 
        String train_id = entity.getTrain_id();
        if (train_id != null) {
            stmt.bindString(9, train_id);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Question readEntity(Cursor cursor, int offset) {
        Question entity = new Question( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // answer
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // op1
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // op3
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // op2
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // q_type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // op4
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // title
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // train_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Question entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAnswer(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOp1(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOp3(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOp2(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setQ_type(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOp4(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTitle(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTrain_id(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Question entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Question entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Question entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
