package com.android.fitz.fastreading.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.android.fitz.fastreading.db.entity.Words;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WORDS".
*/
public class WordsDao extends AbstractDao<Words, Long> {

    public static final String TABLENAME = "WORDS";

    /**
     * Properties of entity Words.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property WID = new Property(0, Long.class, "WID", true, "_id");
        public final static Property Len = new Property(1, String.class, "len", false, "LEN");
        public final static Property View_train_id = new Property(2, String.class, "view_train_id", false, "VIEW_TRAIN_ID");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property Id = new Property(4, String.class, "id", false, "ID");
    }


    public WordsDao(DaoConfig config) {
        super(config);
    }
    
    public WordsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WORDS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: WID
                "\"LEN\" TEXT," + // 1: len
                "\"VIEW_TRAIN_ID\" TEXT," + // 2: view_train_id
                "\"CONTENT\" TEXT," + // 3: content
                "\"ID\" TEXT);"); // 4: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WORDS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Words entity) {
        stmt.clearBindings();
 
        Long WID = entity.getWID();
        if (WID != null) {
            stmt.bindLong(1, WID);
        }
 
        String len = entity.getLen();
        if (len != null) {
            stmt.bindString(2, len);
        }
 
        String view_train_id = entity.getView_train_id();
        if (view_train_id != null) {
            stmt.bindString(3, view_train_id);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(5, id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Words entity) {
        stmt.clearBindings();
 
        Long WID = entity.getWID();
        if (WID != null) {
            stmt.bindLong(1, WID);
        }
 
        String len = entity.getLen();
        if (len != null) {
            stmt.bindString(2, len);
        }
 
        String view_train_id = entity.getView_train_id();
        if (view_train_id != null) {
            stmt.bindString(3, view_train_id);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(5, id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Words readEntity(Cursor cursor, int offset) {
        Words entity = new Words( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // WID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // len
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // view_train_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Words entity, int offset) {
        entity.setWID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLen(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setView_train_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Words entity, long rowId) {
        entity.setWID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Words entity) {
        if(entity != null) {
            return entity.getWID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Words entity) {
        return entity.getWID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
